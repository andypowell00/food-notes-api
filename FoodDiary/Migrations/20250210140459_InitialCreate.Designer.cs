// <auto-generated />
using System;
using FoodDiary.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FoodDiary.Migrations
{
    [DbContext(typeof(FoodDiaryContext))]
    [Migration("20250210140459_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.1");

            modelBuilder.Entity("FoodDiary.Models.Entry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Symptomatic")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Entries");

                    b.HasAnnotation("Sqlite:CreateTrigger", "CREATE TRIGGER UpdateSymptomatic\r\n                AFTER INSERT ON EntrySymptoms\r\n                BEGIN\r\n                    UPDATE Entries \r\n                    SET Symptomatic = 1 \r\n                    WHERE Id = NEW.EntryId;\r\n                END;\r\n\r\n                CREATE TRIGGER UpdateSymptomaticOnDelete\r\n                AFTER DELETE ON EntrySymptoms\r\n                BEGIN\r\n                    SELECT CASE WHEN (SELECT COUNT(*) FROM EntrySymptoms WHERE EntryId = OLD.EntryId) = 0 THEN\r\n                        UPDATE Entries \r\n                        SET Symptomatic = 0 \r\n                        WHERE Id = OLD.EntryId;\r\n                    END;\r\n                END;");
                });

            modelBuilder.Entity("FoodDiary.Models.EntryIngredient", b =>
                {
                    b.Property<int>("EntryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IngredientId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("EntryId", "IngredientId");

                    b.HasIndex("IngredientId");

                    b.ToTable("EntryIngredients");
                });

            modelBuilder.Entity("FoodDiary.Models.EntrySymptom", b =>
                {
                    b.Property<int>("EntryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SymptomId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("EntryId", "SymptomId");

                    b.HasIndex("SymptomId");

                    b.ToTable("EntrySymptoms");
                });

            modelBuilder.Entity("FoodDiary.Models.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("FoodDiary.Models.Symptom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Symptoms");
                });

            modelBuilder.Entity("FoodDiary.Models.EntryIngredient", b =>
                {
                    b.HasOne("FoodDiary.Models.Entry", "Entry")
                        .WithMany("EntryIngredients")
                        .HasForeignKey("EntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDiary.Models.Ingredient", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entry");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("FoodDiary.Models.EntrySymptom", b =>
                {
                    b.HasOne("FoodDiary.Models.Entry", "Entry")
                        .WithMany("EntrySymptoms")
                        .HasForeignKey("EntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDiary.Models.Symptom", "Symptom")
                        .WithMany()
                        .HasForeignKey("SymptomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entry");

                    b.Navigation("Symptom");
                });

            modelBuilder.Entity("FoodDiary.Models.Entry", b =>
                {
                    b.Navigation("EntryIngredients");

                    b.Navigation("EntrySymptoms");
                });
#pragma warning restore 612, 618
        }
    }
}
